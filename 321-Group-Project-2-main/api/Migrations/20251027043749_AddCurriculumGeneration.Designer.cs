// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using api.Data;

#nullable disable

namespace api.Migrations
{
    [DbContext(typeof(AQEDbContext))]
    [Migration("20251027043749_AddCurriculumGeneration")]
    partial class AddCurriculumGeneration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.11");

            modelBuilder.Entity("api.Models.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Permissions")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Admins");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 10, 27, 4, 37, 49, 586, DateTimeKind.Utc).AddTicks(2910),
                            Permissions = "{\"user_management\": true, \"content_management\": true, \"system_settings\": true, \"analytics\": true}",
                            UpdatedAt = new DateTime(2025, 10, 27, 4, 37, 49, 586, DateTimeKind.Utc).AddTicks(2910),
                            UserId = 4
                        });
                });

            modelBuilder.Entity("api.Models.Badge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("IconUrl")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Badges");
                });

            modelBuilder.Entity("api.Models.Curriculum.AnalyticsRollup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AssignmentsCreated")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AttemptsSubmitted")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("AverageScore")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("CompletionRate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("TEXT");

                    b.Property<int>("LessonsGenerated")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LessonsPublishedParent")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LessonsPublishedTeacher")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Role")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RoleId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TimeWindow")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalQuestionsAttempted")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("TotalScoreSum")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("WindowEnd")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("WindowStart")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LastUpdated");

                    b.HasIndex("Role", "RoleId", "TimeWindow");

                    b.ToTable("AnalyticsRollups");
                });

            modelBuilder.Entity("api.Models.Curriculum.Assignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("AssignedById")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AssignedByRole")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AssigneeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AssigneeType")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DueAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("GeneratedLessonId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AssignedAt");

                    b.HasIndex("GeneratedLessonId");

                    b.HasIndex("AssignedByRole", "AssignedById");

                    b.HasIndex("AssigneeType", "AssigneeId");

                    b.ToTable("Assignments");
                });

            modelBuilder.Entity("api.Models.Curriculum.Attempt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AnswersJson")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("AssignmentId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ScorePercent")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("StudentId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("SubmittedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("WrongCount")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("SubmittedAt");

                    b.HasIndex("AssignmentId", "StudentId")
                        .IsUnique();

                    b.ToTable("Attempts");
                });

            modelBuilder.Entity("api.Models.Curriculum.GeneratedLesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreatedByRole")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int>("DifficultyTag")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GradeId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("PublishedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SubjectId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByRole");

                    b.HasIndex("GradeId");

                    b.HasIndex("Status");

                    b.HasIndex("SubjectId", "GradeId", "DifficultyTag");

                    b.ToTable("GeneratedLessons");
                });

            modelBuilder.Entity("api.Models.Curriculum.Grade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SortOrder")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("SortOrder");

                    b.ToTable("Grades");
                });

            modelBuilder.Entity("api.Models.Curriculum.LessonQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AnswerIndex")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ChoicesJson")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Explanation")
                        .HasColumnType("TEXT");

                    b.Property<int>("GeneratedLessonId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Prompt")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GeneratedLessonId", "Order");

                    b.ToTable("LessonQuestions");
                });

            modelBuilder.Entity("api.Models.Curriculum.LibraryItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("GeneratedLessonId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OwnerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OwnerRole")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("PublishedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GeneratedLessonId");

                    b.HasIndex("PublishedAt");

                    b.HasIndex("OwnerRole", "OwnerId");

                    b.ToTable("LibraryItems");
                });

            modelBuilder.Entity("api.Models.Curriculum.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("api.Models.DigitalLibrary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AdminId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("GradeLevel")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ResourceUrl")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Tags")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("GradeLevel");

                    b.HasIndex("Subject");

                    b.ToTable("DigitalLibraries");
                });

            modelBuilder.Entity("api.Models.DigitalLibraryAssignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("DigitalLibraryId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("LessonId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int>("StudentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StudentNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int?>("TeacherId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DigitalLibraryId");

                    b.HasIndex("LessonId");

                    b.HasIndex("StudentId");

                    b.HasIndex("TeacherId");

                    b.ToTable("DigitalLibraryAssignments");
                });

            modelBuilder.Entity("api.Models.Donation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("DonorName")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAnonymous")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("TransactionId")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Donations");
                });

            modelBuilder.Entity("api.Models.Lesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AdminId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("GradeLevel")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ResourceUrl")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Tags")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("GradeLevel");

                    b.HasIndex("Subject");

                    b.ToTable("Lessons");
                });

            modelBuilder.Entity("api.Models.LessonBadge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BadgeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LessonId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("BadgeId");

                    b.HasIndex("LessonId");

                    b.ToTable("LessonBadges");
                });

            modelBuilder.Entity("api.Models.LessonSection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ContentJson")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("LessonId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.ToTable("LessonSections");
                });

            modelBuilder.Entity("api.Models.MiniGame", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConfigJson")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("GameType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("LessonId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.ToTable("MiniGames");
                });

            modelBuilder.Entity("api.Models.Parent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ChildrenEmails")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Parents");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ChildrenEmails = "[\"student@demo.com\"]",
                            CreatedAt = new DateTime(2025, 10, 27, 4, 37, 49, 586, DateTimeKind.Utc).AddTicks(2910),
                            UpdatedAt = new DateTime(2025, 10, 27, 4, 37, 49, 586, DateTimeKind.Utc).AddTicks(2910),
                            UserId = 3
                        });
                });

            modelBuilder.Entity("api.Models.ParentStudent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LinkedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("ParentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StudentId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("ParentId", "StudentId")
                        .IsUnique();

                    b.ToTable("ParentStudents");
                });

            modelBuilder.Entity("api.Models.PracticeItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DifficultyLevel")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("ItemType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("LessonId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PayloadJson")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Section")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.ToTable("PracticeItems");
                });

            modelBuilder.Entity("api.Models.PracticeMaterial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("TeacherId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Subject");

                    b.HasIndex("TeacherId");

                    b.ToTable("PracticeMaterials");
                });

            modelBuilder.Entity("api.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CorrectAnswer")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Explanation")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("OptionA")
                        .HasColumnType("TEXT");

                    b.Property<string>("OptionB")
                        .HasColumnType("TEXT");

                    b.Property<string>("OptionC")
                        .HasColumnType("TEXT");

                    b.Property<string>("OptionD")
                        .HasColumnType("TEXT");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PracticeMaterialId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PracticeMaterialId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("api.Models.SMS.ContentTargeting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("BookId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("GradeBand")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Language")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<int?>("LessonId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PracticePackId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RuleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Subject")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Active");

                    b.HasIndex("Priority");

                    b.ToTable("ContentTargetings");
                });

            modelBuilder.Entity("api.Models.SMS.Flow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("DefaultEntryNodeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EdgesJson")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Locale")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("NodesJson")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Active");

                    b.HasIndex("Type");

                    b.ToTable("Flows");
                });

            modelBuilder.Entity("api.Models.SMS.FlowSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Channel")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("CurrentNodeId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("FlowId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Locale")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneE164")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("StateJson")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ExpiresAt");

                    b.HasIndex("FlowId");

                    b.HasIndex("PhoneE164");

                    b.ToTable("FlowSessions");
                });

            modelBuilder.Entity("api.Models.SMS.GatewayMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Channel")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeliveredAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Direction")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("ErrorText")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int?>("FlowId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PayloadJson")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneE164")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("SentAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("SessionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("FlowId");

                    b.HasIndex("PhoneE164");

                    b.HasIndex("SessionId");

                    b.HasIndex("Status");

                    b.ToTable("GatewayMessages");
                });

            modelBuilder.Entity("api.Models.SMS.GatewayNumber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CapabilitiesJson")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneE164")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PhoneE164")
                        .IsUnique();

                    b.ToTable("GatewayNumbers");
                });

            modelBuilder.Entity("api.Models.SMS.OptIn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Channel")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ConsentAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConsentSource")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Locale")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<bool>("OptedIn")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PhoneE164")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PhoneE164", "Channel")
                        .IsUnique();

                    b.ToTable("OptIns");
                });

            modelBuilder.Entity("api.Models.SMS.RoutingRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Channel")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("FlowId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MatcherType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("MatcherValue")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Active");

                    b.HasIndex("Channel");

                    b.HasIndex("FlowId");

                    b.HasIndex("Priority");

                    b.ToTable("RoutingRules");
                });

            modelBuilder.Entity("api.Models.SMS.SmsKeyword", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int?>("FlowId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Keyword")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Locale")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FlowId");

                    b.HasIndex("Keyword", "Locale")
                        .IsUnique();

                    b.ToTable("SmsKeywords");
                });

            modelBuilder.Entity("api.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AccessCode")
                        .HasMaxLength(6)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("GradeLevel")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsIndependent")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TeacherId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AccessCode");

                    b.HasIndex("TeacherId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessCode = "123456",
                            CreatedAt = new DateTime(2025, 10, 27, 4, 37, 49, 586, DateTimeKind.Utc).AddTicks(2910),
                            GradeLevel = "8th Grade",
                            IsIndependent = false,
                            TeacherId = 1,
                            UpdatedAt = new DateTime(2025, 10, 27, 4, 37, 49, 586, DateTimeKind.Utc).AddTicks(2910),
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            AccessCode = "789012",
                            CreatedAt = new DateTime(2025, 10, 27, 4, 37, 49, 586, DateTimeKind.Utc).AddTicks(2910),
                            GradeLevel = "7th Grade",
                            IsIndependent = false,
                            TeacherId = 1,
                            UpdatedAt = new DateTime(2025, 10, 27, 4, 37, 49, 586, DateTimeKind.Utc).AddTicks(2910),
                            UserId = 5
                        });
                });

            modelBuilder.Entity("api.Models.StudentBadge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BadgeId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("EarnedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("StudentId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("BadgeId");

                    b.HasIndex("StudentId", "BadgeId")
                        .IsUnique();

                    b.ToTable("StudentBadges");
                });

            modelBuilder.Entity("api.Models.StudentLesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CheckedOutAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("CorrectAnswers")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LessonId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int?>("Score")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("StudentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StudentNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int>("TotalQuestions")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.HasIndex("StudentId", "LessonId")
                        .IsUnique();

                    b.ToTable("StudentLessons");
                });

            modelBuilder.Entity("api.Models.StudentPracticeMaterial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int>("PracticeMaterialId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Score")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("StudentId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TotalQuestions")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PracticeMaterialId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentPracticeMaterials");
                });

            modelBuilder.Entity("api.Models.StudentStatistics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("AverageScore")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("CurrentStreak")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastActivityDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("LongestStreak")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StudentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SubjectScores")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<int>("TotalBadgesEarned")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalCorrectAnswers")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalLessonsCheckedOut")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalLessonsCompleted")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalLessonsStarted")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalLibraryAssignments")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalLibraryCompleted")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalMinutesSpent")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalPracticeCompleted")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalPracticeStarted")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalQuestionsAnswered")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("StudentId")
                        .IsUnique();

                    b.ToTable("StudentStatistics");
                });

            modelBuilder.Entity("api.Models.Subscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("MonthlyPrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("PlanName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("PlanType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("StripeCustomerId")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("StripeSubscriptionId")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("api.Models.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("GradeLevelTaught")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("SubjectTaught")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            GradeLevelTaught = "6th-8th Grade",
                            SubjectTaught = "Mathematics",
                            UserId = 2
                        });
                });

            modelBuilder.Entity("api.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Role");

                    b.ToTable("Users", t =>
                        {
                            t.HasCheckConstraint("CK_User_Role", "Role IN ('student', 'teacher', 'parent', 'admin')");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 10, 27, 4, 37, 49, 586, DateTimeKind.Utc).AddTicks(2910),
                            Email = "student@demo.com",
                            IsActive = true,
                            Name = "Demo Student",
                            Password = "cDsKPWrXW2SaKK3efYPGJR2kV1SSY7x/9F7HCbCoRIs=",
                            Role = "student"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 10, 27, 4, 37, 49, 586, DateTimeKind.Utc).AddTicks(2910),
                            Email = "teacher@demo.com",
                            IsActive = true,
                            Name = "Demo Teacher",
                            Password = "zeOD7ujuekQArfehX3FvF5ouuXZGs34InrjW0E5mNBY=",
                            Role = "teacher"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 10, 27, 4, 37, 49, 586, DateTimeKind.Utc).AddTicks(2910),
                            Email = "parent@demo.com",
                            IsActive = true,
                            Name = "Demo Parent",
                            Password = "guPt9fXzpGtflFebYYF/2aHzVq3O9e4i2juW73dcSGA=",
                            Role = "parent"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 10, 27, 4, 37, 49, 586, DateTimeKind.Utc).AddTicks(2910),
                            Email = "admin@demo.com",
                            IsActive = true,
                            Name = "Demo Admin",
                            Password = "JAvlGPq9JyTdtvBO6x2llnRI1+gxwIyPqCKAn3THIKk=",
                            Role = "admin"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 10, 27, 4, 37, 49, 586, DateTimeKind.Utc).AddTicks(2910),
                            Email = "jane@demo.com",
                            IsActive = true,
                            Name = "Jane Smith",
                            Password = "Kb4864j9Qe2SgrOZytHdYKMGNESGNOdUgBl/eS6kgrs=",
                            Role = "student"
                        });
                });

            modelBuilder.Entity("api.Models.Admin", b =>
                {
                    b.HasOne("api.Models.User", "User")
                        .WithOne("Admin")
                        .HasForeignKey("api.Models.Admin", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("api.Models.Curriculum.Assignment", b =>
                {
                    b.HasOne("api.Models.Curriculum.GeneratedLesson", "GeneratedLesson")
                        .WithMany("Assignments")
                        .HasForeignKey("GeneratedLessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GeneratedLesson");
                });

            modelBuilder.Entity("api.Models.Curriculum.Attempt", b =>
                {
                    b.HasOne("api.Models.Curriculum.Assignment", "Assignment")
                        .WithMany("Attempts")
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assignment");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("api.Models.Curriculum.GeneratedLesson", b =>
                {
                    b.HasOne("api.Models.Curriculum.Grade", "Grade")
                        .WithMany("GeneratedLessons")
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.Curriculum.Subject", "Subject")
                        .WithMany("GeneratedLessons")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Grade");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("api.Models.Curriculum.LessonQuestion", b =>
                {
                    b.HasOne("api.Models.Curriculum.GeneratedLesson", "GeneratedLesson")
                        .WithMany("Questions")
                        .HasForeignKey("GeneratedLessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GeneratedLesson");
                });

            modelBuilder.Entity("api.Models.Curriculum.LibraryItem", b =>
                {
                    b.HasOne("api.Models.Curriculum.GeneratedLesson", "GeneratedLesson")
                        .WithMany("LibraryItems")
                        .HasForeignKey("GeneratedLessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GeneratedLesson");
                });

            modelBuilder.Entity("api.Models.DigitalLibrary", b =>
                {
                    b.HasOne("api.Models.Admin", "Admin")
                        .WithMany("DigitalLibraries")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("api.Models.DigitalLibraryAssignment", b =>
                {
                    b.HasOne("api.Models.DigitalLibrary", "DigitalLibrary")
                        .WithMany("DigitalLibraryAssignments")
                        .HasForeignKey("DigitalLibraryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.Lesson", null)
                        .WithMany("DigitalLibraryAssignments")
                        .HasForeignKey("LessonId");

                    b.HasOne("api.Models.Student", "Student")
                        .WithMany("DigitalLibraryAssignments")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("DigitalLibrary");

                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("api.Models.Donation", b =>
                {
                    b.HasOne("api.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("api.Models.Lesson", b =>
                {
                    b.HasOne("api.Models.Admin", "Admin")
                        .WithMany("Lessons")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("api.Models.LessonBadge", b =>
                {
                    b.HasOne("api.Models.Badge", "Badge")
                        .WithMany()
                        .HasForeignKey("BadgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.Lesson", "Lesson")
                        .WithMany()
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Badge");

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("api.Models.LessonSection", b =>
                {
                    b.HasOne("api.Models.Lesson", "Lesson")
                        .WithMany()
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("api.Models.MiniGame", b =>
                {
                    b.HasOne("api.Models.Lesson", "Lesson")
                        .WithMany()
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("api.Models.Parent", b =>
                {
                    b.HasOne("api.Models.User", "User")
                        .WithOne("Parent")
                        .HasForeignKey("api.Models.Parent", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("api.Models.ParentStudent", b =>
                {
                    b.HasOne("api.Models.Parent", "Parent")
                        .WithMany("ParentStudents")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.Student", "Student")
                        .WithMany("ParentStudents")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parent");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("api.Models.PracticeItem", b =>
                {
                    b.HasOne("api.Models.Lesson", "Lesson")
                        .WithMany()
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("api.Models.PracticeMaterial", b =>
                {
                    b.HasOne("api.Models.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("api.Models.Question", b =>
                {
                    b.HasOne("api.Models.PracticeMaterial", "PracticeMaterial")
                        .WithMany("Questions")
                        .HasForeignKey("PracticeMaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PracticeMaterial");
                });

            modelBuilder.Entity("api.Models.SMS.FlowSession", b =>
                {
                    b.HasOne("api.Models.SMS.Flow", "Flow")
                        .WithMany("FlowSessions")
                        .HasForeignKey("FlowId");

                    b.Navigation("Flow");
                });

            modelBuilder.Entity("api.Models.SMS.GatewayMessage", b =>
                {
                    b.HasOne("api.Models.SMS.Flow", "Flow")
                        .WithMany()
                        .HasForeignKey("FlowId");

                    b.HasOne("api.Models.SMS.FlowSession", "Session")
                        .WithMany("Messages")
                        .HasForeignKey("SessionId");

                    b.Navigation("Flow");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("api.Models.SMS.RoutingRule", b =>
                {
                    b.HasOne("api.Models.SMS.Flow", "Flow")
                        .WithMany("RoutingRules")
                        .HasForeignKey("FlowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Flow");
                });

            modelBuilder.Entity("api.Models.SMS.SmsKeyword", b =>
                {
                    b.HasOne("api.Models.SMS.Flow", "Flow")
                        .WithMany("SmsKeywords")
                        .HasForeignKey("FlowId");

                    b.Navigation("Flow");
                });

            modelBuilder.Entity("api.Models.Student", b =>
                {
                    b.HasOne("api.Models.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("api.Models.User", "User")
                        .WithOne("Student")
                        .HasForeignKey("api.Models.Student", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");

                    b.Navigation("User");
                });

            modelBuilder.Entity("api.Models.StudentBadge", b =>
                {
                    b.HasOne("api.Models.Badge", "Badge")
                        .WithMany("StudentBadges")
                        .HasForeignKey("BadgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.Student", "Student")
                        .WithMany("StudentBadges")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Badge");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("api.Models.StudentLesson", b =>
                {
                    b.HasOne("api.Models.Lesson", "Lesson")
                        .WithMany("StudentLessons")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.Student", "Student")
                        .WithMany("StudentLessons")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("api.Models.StudentPracticeMaterial", b =>
                {
                    b.HasOne("api.Models.PracticeMaterial", "PracticeMaterial")
                        .WithMany("StudentPracticeMaterials")
                        .HasForeignKey("PracticeMaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.Student", "Student")
                        .WithMany("StudentPracticeMaterials")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PracticeMaterial");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("api.Models.StudentStatistics", b =>
                {
                    b.HasOne("api.Models.Student", "Student")
                        .WithOne("Statistics")
                        .HasForeignKey("api.Models.StudentStatistics", "StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("api.Models.Subscription", b =>
                {
                    b.HasOne("api.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("api.Models.Teacher", b =>
                {
                    b.HasOne("api.Models.User", "User")
                        .WithOne("Teacher")
                        .HasForeignKey("api.Models.Teacher", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("api.Models.Admin", b =>
                {
                    b.Navigation("DigitalLibraries");

                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("api.Models.Badge", b =>
                {
                    b.Navigation("StudentBadges");
                });

            modelBuilder.Entity("api.Models.Curriculum.Assignment", b =>
                {
                    b.Navigation("Attempts");
                });

            modelBuilder.Entity("api.Models.Curriculum.GeneratedLesson", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("LibraryItems");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("api.Models.Curriculum.Grade", b =>
                {
                    b.Navigation("GeneratedLessons");
                });

            modelBuilder.Entity("api.Models.Curriculum.Subject", b =>
                {
                    b.Navigation("GeneratedLessons");
                });

            modelBuilder.Entity("api.Models.DigitalLibrary", b =>
                {
                    b.Navigation("DigitalLibraryAssignments");
                });

            modelBuilder.Entity("api.Models.Lesson", b =>
                {
                    b.Navigation("DigitalLibraryAssignments");

                    b.Navigation("StudentLessons");
                });

            modelBuilder.Entity("api.Models.Parent", b =>
                {
                    b.Navigation("ParentStudents");
                });

            modelBuilder.Entity("api.Models.PracticeMaterial", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("StudentPracticeMaterials");
                });

            modelBuilder.Entity("api.Models.SMS.Flow", b =>
                {
                    b.Navigation("FlowSessions");

                    b.Navigation("RoutingRules");

                    b.Navigation("SmsKeywords");
                });

            modelBuilder.Entity("api.Models.SMS.FlowSession", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("api.Models.Student", b =>
                {
                    b.Navigation("DigitalLibraryAssignments");

                    b.Navigation("ParentStudents");

                    b.Navigation("Statistics");

                    b.Navigation("StudentBadges");

                    b.Navigation("StudentLessons");

                    b.Navigation("StudentPracticeMaterials");
                });

            modelBuilder.Entity("api.Models.User", b =>
                {
                    b.Navigation("Admin");

                    b.Navigation("Parent");

                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });
#pragma warning restore 612, 618
        }
    }
}
